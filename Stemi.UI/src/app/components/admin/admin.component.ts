import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { UserService, User, UserImportResult } from '../../services/user.service';

@Component({
  selector: 'app-admin',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="admin-dashboard">
      <!-- Admin Header -->
      <nav class="navbar navbar-dark bg-dark">
        <div class="container">
          <span class="navbar-brand">
            <img src="assets/img/logo_stemi.png" height="40" class="me-2">
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
          </span>
          <div class="navbar-nav ms-auto">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown">
                üë®‚Äçüíº {{currentUser?.userName}}
              </a>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#">–ü—Ä–æ—Ñ–∏–ª—å</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-danger" (click)="logout()">–í—ã–π—Ç–∏</a></li>
              </ul>
            </div>
          </div>
        </div>
      </nav>

      <!-- Admin Content -->
      <div class="container-fluid mt-4">
        <div class="row">
          <!-- Sidebar -->
          <div class="col-md-3">
            <div class="card">
              <div class="card-header bg-primary text-white">
                <h6 class="mb-0">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h6>
              </div>
              <div class="list-group list-group-flush">
                <a class="list-group-item list-group-item-action active" (click)="showSection('overview')">üìä –û–±–∑–æ—Ä</a>
                <a class="list-group-item list-group-item-action" (click)="showSection('users')">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</a>
                <a class="list-group-item list-group-item-action">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</a>
                <a class="list-group-item list-group-item-action">üí∞ –§–∏–Ω–∞–Ω—Å—ã</a>
                <a class="list-group-item list-group-item-action">üìà –û—Ç—á–µ—Ç—ã</a>
                <a class="list-group-item list-group-item-action">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
              </div>
            </div>
          </div>

          <!-- Main Content -->
          <div class="col-md-9">
            <!-- Overview Section -->
            <div *ngIf="currentSection === 'overview'" class="overview-section">
              <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
              
              <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
              <div class="row mb-4">
                <div class="col-md-3">
                  <div class="card text-white bg-primary">
                    <div class="card-body">
                      <h4>{{ users.length }}</h4>
                      <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    </div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="card text-white bg-success">
                    <div class="card-body">
                      <h4>{{ getUsersByRole('Student').length }}</h4>
                      <p>–°—Ç—É–¥–µ–Ω—Ç–æ–≤</p>
                    </div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="card text-white bg-warning">
                    <div class="card-body">
                      <h4>{{ getUsersByRole('Teacher').length }}</h4>
                      <p>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</p>
                    </div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="card text-white bg-info">
                    <div class="card-body">
                      <h4>{{ getUsersByRole('Admin').length }}</h4>
                      <p>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
              <div class="card">
                <div class="card-header">
                  <h5 class="mb-0">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h5>
                </div>
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-4 mb-3">
                      <button class="btn btn-outline-primary w-100" (click)="showSection('users')">
                        üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                      </button>
                    </div>
                    <div class="col-md-4 mb-3">
                      <button class="btn btn-outline-success w-100" (click)="downloadTemplate()">
                        üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel
                      </button>
                    </div>
                    <div class="col-md-4 mb-3">
                      <button class="btn btn-outline-info w-100" (click)="displayImportDialog = true">
                        üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Users Management Section -->
            <div *ngIf="currentSection === 'users'" class="users-section">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
                <div>
                  <button class="btn btn-secondary me-2" (click)="downloadTemplate()">
                    üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω
                  </button>
                  <button class="btn btn-success me-2" (click)="displayImportDialog = true">
                    üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
                  </button>
                  <button class="btn btn-danger" 
                          [disabled]="selectedUsers.length === 0"
                          (click)="confirmDeleteSelected()">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ({{selectedUsers.length}})
                  </button>
                </div>
              </div>

              <!-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -->
              <div class="card">
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-striped table-hover">
                      <thead>
                        <tr>
                          <th>
                            <input type="checkbox" 
                                  [checked]="isAllSelected()"
                                  (change)="toggleSelectAll($event)">
                          </th>
                          <th>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</th>
                          <th>Email</th>
                          <th>–†–æ–ª–∏</th>
                          <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr *ngFor="let user of users" 
                            [class.table-active]="isSelected(user)">
                          <td>
                            <input type="checkbox" 
                                  [checked]="isSelected(user)"
                                  (change)="toggleUserSelection(user)">
                          </td>
                          <td>{{ user.userName }}</td>
                          <td>{{ user.email }}</td>
                          <td>
                            <span *ngFor="let role of user.roles" 
                                  class="badge me-1"
                                  [ngClass]="getRoleBadgeClass(role)">
                              {{ role }}
                            </span>
                          </td>
                          <td>{{ user.createdAt | date:'dd.MM.yyyy HH:mm' }}</td>
                          <td>
                            <button class="btn btn-sm btn-outline-primary me-1" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                              ‚úèÔ∏è
                            </button>
                            <button class="btn btn-sm btn-outline-danger" 
                                    title="–£–¥–∞–ª–∏—Ç—å"
                                    (click)="confirmDeleteUser(user)">
                              üóëÔ∏è
                            </button>
                          </td>
                        </tr>
                        <tr *ngIf="users.length === 0">
                          <td colspan="6" class="text-center p-4 text-muted">
                            <div>üë•</div>
                            <p class="mt-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>

                  <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è -->
                  <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                      –ü–æ–∫–∞–∑–∞–Ω–æ {{ users.length }} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    </div>
                    <div>
                      <button class="btn btn-sm btn-outline-secondary me-1" disabled>–ù–∞–∑–∞–¥</button>
                      <button class="btn btn-sm btn-outline-secondary" disabled>–í–ø–µ—Ä–µ–¥</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- –î–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ -->
      <div *ngIf="displayImportDialog" class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">–ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Excel</h5>
              <button type="button" class="btn-close" (click)="onImportDialogHide()"></button>
            </div>
            <div class="modal-body">
              <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ -->
              <div class="mb-3">
                <label for="fileInput" class="form-label">–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª</label>
                <input #fileInput type="file" class="form-control" 
                      accept=".xlsx,.xls" 
                      (change)="onFileSelect($event)"
                      [disabled]="importLoading">
                <div class="form-text">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB</div>
              </div>

              <!-- –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª -->
              <div *ngIf="uploadedFile" class="mb-3">
                <div class="alert alert-info d-flex align-items-center">
                  <span class="me-2">üìÑ</span>
                  <div>
                    <strong>–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:</strong> {{ uploadedFile.name }}
                    <br>
                    <small>–†–∞–∑–º–µ—Ä: {{ (uploadedFile.size / 1024 / 1024).toFixed(2) }} MB</small>
                  </div>
                </div>
              </div>

              <!-- –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞) -->
              <div class="mb-3">
                <button class="btn btn-outline-primary w-100" (click)="fileInput.click()">
                  üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª Excel
                </button>
              </div>

              <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ -->
              <div *ngIf="importResult" class="import-result p-3 bg-light rounded">
                <h6>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:</h6>
                <p><strong>–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:</strong> {{ importResult.totalRows }}</p>
                <p class="text-success"><strong>–£—Å–ø–µ—à–Ω–æ:</strong> {{ importResult.successfullyImported }}</p>
                <p class="text-danger"><strong>–û—à–∏–±–æ–∫:</strong> {{ importResult.failed }}</p>

                <!-- –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ -->
                <div *ngIf="importResult.errors.length > 0" class="errors-list mt-3">
                  <h6>–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:</h6>
                  <div class="border rounded p-2" style="max-height: 200px; overflow-y: auto;">
                    <ul class="list-unstyled mb-0">
                      <li *ngFor="let error of importResult.errors.slice(0, 10)" 
                          class="text-danger small mb-1">
                        ‚ùå {{ error }}
                      </li>
                    </ul>
                    <p *ngIf="importResult.errors.length > 10" class="text-muted small mt-2">
                      ... –∏ –µ—â–µ {{ importResult.errors.length - 10 }} –æ—à–∏–±–æ–∫
                    </p>
                  </div>
                </div>

                <!-- –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ -->
                <div *ngIf="importResult.importedUsers.length > 0" class="imported-users mt-3">
                  <h6>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h6>
                  <div class="border rounded p-2" style="max-height: 150px; overflow-y: auto;">
                    <ul class="list-unstyled mb-0">
                      <li *ngFor="let user of importResult.importedUsers.slice(0, 5)" 
                          class="text-success small mb-1">
                        ‚úÖ {{ user.userName }} ({{ user.email }})
                      </li>
                    </ul>
                    <p *ngIf="importResult.importedUsers.length > 5" class="text-muted small mt-2">
                      ... –∏ –µ—â–µ {{ importResult.importedUsers.length - 5 }} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    </p>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" 
                      (click)="onImportDialogHide()"
                      [disabled]="importLoading">
                –û—Ç–º–µ–Ω–∞
              </button>
              <button type="button" class="btn btn-success" 
                      (click)="onImport()"
                      [disabled]="!uploadedFile || importLoading">
                <span *ngIf="importLoading" class="spinner-border spinner-border-sm me-2"></span>
                {{ importLoading ? '–ò–º–ø–æ—Ä—Ç...' : '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å' }}
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
      <div *ngIf="notification.show" 
           class="alert alert-dismissible fade show position-fixed top-0 end-0 m-3"
           [ngClass]="'alert-' + notification.type"
           style="z-index: 9999; max-width: 400px;">
        <strong>{{ notification.title }}</strong> {{ notification.message }}
        <button type="button" class="btn-close" (click)="hideNotification()"></button>
      </div>
    </div>
  `,
  styles: [`
    .admin-dashboard {
      min-height: 100vh;
      background-color: #f8f9fa;
    }
    .list-group-item {
      border: none;
      padding: 1rem 1.25rem;
      cursor: pointer;
    }
    .list-group-item.active {
      background-color: #0064b4;
      border-color: #0064b4;
    }
    .list-group-item:hover:not(.active) {
      background-color: #e9ecef;
    }
    .badge-admin {
      background-color: #dc3545;
    }
    .badge-teacher {
      background-color: #ffc107;
      color: #000;
    }
    .badge-student {
      background-color: #0dcaf0;
    }
    .table th {
      border-top: none;
      font-weight: 600;
    }
    .modal {
      z-index: 1050;
    }
  `]
})
export class AdminComponent implements OnInit {
  @ViewChild('fileInput') fileInput!: ElementRef;

  currentUser: any = null;
  currentSection = 'overview';

  // Users management
  users: User[] = [];
  selectedUsers: User[] = [];
  loading = false;

  // Import functionality
  displayImportDialog = false;
  uploadedFile: File | null = null;
  importResult: UserImportResult | null = null;
  importLoading = false;

  // Notification
  notification = {
    show: false,
    type: 'success',
    title: '',
    message: ''
  };

  constructor(
    private authService: AuthService,
    private userService: UserService,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.currentUser = this.authService.getCurrentUser();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!this.authService.isAdmin()) {
      this.router.navigate(['/dashboard']);
      return;
    }

    this.loadUsers();
  }

  showSection(section: string): void {
    this.currentSection = section;
    if (section === 'users') {
      this.loadUsers();
    }
  }

  // Users management methods
  loadUsers(): void {
    this.loading = true;
    this.userService.getUsers().subscribe({
      next: (users) => {
        this.users = users;
        this.loading = false;
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.loading = false;
      }
    });
  }

  getUsersByRole(role: string): User[] {
    return this.users.filter(user => user.roles.includes(role));
  }

  getRoleBadgeClass(role: string): string {
    switch (role) {
      case 'Admin': return 'badge-admin';
      case 'Teacher': return 'badge-teacher';
      case 'Student': return 'badge-student';
      default: return 'badge-secondary';
    }
  }

  // Selection methods
  isSelected(user: User): boolean {
    return this.selectedUsers.some(u => u.id === user.id);
  }

  isAllSelected(): boolean {
    return this.users.length > 0 && this.selectedUsers.length === this.users.length;
  }

  toggleUserSelection(user: User): void {
    const index = this.selectedUsers.findIndex(u => u.id === user.id);
    if (index > -1) {
      this.selectedUsers.splice(index, 1);
    } else {
      this.selectedUsers.push(user);
    }
  }

  toggleSelectAll(event: any): void {
    if (event.target.checked) {
      this.selectedUsers = [...this.users];
    } else {
      this.selectedUsers = [];
    }
  }

  // Import methods
  onFileSelect(event: any): void {
    const file = event.target.files?.[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      const allowedTypes = ['.xlsx', '.xls'];
      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();

      if (!allowedTypes.includes(fileExtension)) {
        this.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
        this.fileInput.nativeElement.value = '';
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10MB)
      if (file.size > 10 * 1024 * 1024) {
        this.showError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
        this.fileInput.nativeElement.value = '';
        return;
      }

      this.uploadedFile = file;
      this.importResult = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    }
  }

  onImport(): void {
    if (!this.uploadedFile) {
      this.showWarn('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }

    this.importLoading = true;
    this.userService.importUsersFromExcel(this.uploadedFile).subscribe({
      next: (result) => {
        this.importResult = result;
        this.importLoading = false;

        if (result.successfullyImported > 0) {
          this.showSuccess(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.successfullyImported} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          this.loadUsers();
        }

        if (result.failed > 0) {
          this.showWarn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${result.failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        this.importLoading = false;
      }
    });
  }

  downloadTemplate(): void {
    this.userService.downloadTemplate().subscribe({
      next: (blob) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'Users_Import_Template.xlsx';
        a.click();
        window.URL.revokeObjectURL(url);
        this.showSuccess('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞');
      }
    });
  }

  onImportDialogHide(): void {
    this.uploadedFile = null;
    this.importResult = null;
    this.displayImportDialog = false;
    if (this.fileInput) {
      this.fileInput.nativeElement.value = '';
    }
  }

  // Delete methods
  confirmDeleteUser(user: User): void {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.userName}"?`)) {
      this.deleteUser(user);
    }
  }

  confirmDeleteSelected(): void {
    if (this.selectedUsers.length === 0) return;

    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${this.selectedUsers.length})?`)) {
      this.deleteSelectedUsers();
    }
  }

  deleteUser(user: User): void {
    this.userService.deleteUser(user.id).subscribe({
      next: () => {
        this.showSuccess('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        this.loadUsers();
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    });
  }

  deleteSelectedUsers(): void {
    this.loading = true;
    const deletePromises = this.selectedUsers.map(user =>
      this.userService.deleteUser(user.id).toPromise()
    );

    Promise.all(deletePromises).then(() => {
      this.showSuccess('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
      this.loadUsers();
      this.selectedUsers = [];
      this.loading = false;
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      this.loading = false;
    });
  }

  // Notification methods
  private showSuccess(message: string): void {
    this.showNotification('success', '–£—Å–ø–µ—à–Ω–æ', message);
  }

  private showError(message: string): void {
    this.showNotification('danger', '–û—à–∏–±–∫–∞', message);
  }

  private showWarn(message: string): void {
    this.showNotification('warning', '–í–Ω–∏–º–∞–Ω–∏–µ', message);
  }

  private showNotification(type: string, title: string, message: string): void {
    this.notification = {
      show: true,
      type,
      title,
      message
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      this.hideNotification();
    }, 5000);
  }

  hideNotification(): void {
    this.notification.show = false;
  }

  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}
