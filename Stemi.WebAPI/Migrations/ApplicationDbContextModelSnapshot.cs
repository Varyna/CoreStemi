// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stemi.WebAPI.Data;

#nullable disable

namespace Stemi.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.DirectoryCabinets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectoryCabinets");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.DirectoryGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Corpus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectoryGroups");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.DirectoryTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectoryTimes");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DirectoryCabinetsId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectoryGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectoryTimeId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberLecture")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryCabinetsId");

                    b.HasIndex("DirectoryGroupsId");

                    b.HasIndex("DirectoryTimeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("StudentsId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ControlType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("NameStudents")
                        .HasColumnType("text");

                    b.Property<int>("Relevance")
                        .HasColumnType("integer");

                    b.Property<string>("Score")
                        .HasColumnType("text");

                    b.Property<int?>("SessionCourse")
                        .HasColumnType("integer");

                    b.Property<string>("SessionName")
                        .HasColumnType("text");

                    b.Property<string>("SessionYear")
                        .HasColumnType("text");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.HasIndex("SessionYear");

                    b.HasIndex("StudentsId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributedCertificate")
                        .HasColumnType("text");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("ConditionalTranslation")
                        .HasColumnType("text");

                    b.Property<string>("ConditionsOfEducation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateCredited")
                        .HasColumnType("text");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("DateOfEnrollment")
                        .HasColumnType("text");

                    b.Property<string>("DateOfIssue")
                        .HasColumnType("text");

                    b.Property<string>("Differences")
                        .HasColumnType("text");

                    b.Property<string>("Direction")
                        .HasColumnType("text");

                    b.Property<string>("DocumentType")
                        .HasColumnType("text");

                    b.Property<string>("DormitoryRoom")
                        .HasColumnType("text");

                    b.Property<string>("DraftBoard")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedRelease")
                        .HasColumnType("text");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("FormerLastName")
                        .HasColumnType("text");

                    b.Property<string>("Hostel")
                        .HasColumnType("text");

                    b.Property<string>("INNOld")
                        .HasColumnType("text");

                    b.Property<string>("IndexPlace")
                        .HasColumnType("text");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<string>("LearningForms")
                        .HasColumnType("text");

                    b.Property<string>("Learninglanguage")
                        .HasColumnType("text");

                    b.Property<string>("MilitaryDepartment")
                        .HasColumnType("text");

                    b.Property<string>("MilitaryID")
                        .HasColumnType("text");

                    b.Property<string>("MilitaryRank")
                        .HasColumnType("text");

                    b.Property<string>("MilitarySpecialty")
                        .HasColumnType("text");

                    b.Property<string>("NameStudent")
                        .HasColumnType("text");

                    b.Property<string>("NoOffsetBook")
                        .HasColumnType("text");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<string>("OrderOfAdmission")
                        .HasColumnType("text");

                    b.Property<string>("PassportID")
                        .HasColumnType("text");

                    b.Property<string>("Payment")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("PrivilegesDateOfIssue")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("SNILS")
                        .HasColumnType("text");

                    b.Property<string>("SecondHigher")
                        .HasColumnType("text");

                    b.Property<string>("SeriesAndNumber")
                        .HasColumnType("text");

                    b.Property<string>("SocialInsuranceNo")
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.Property<string>("StudentGroup")
                        .HasColumnType("text");

                    b.Property<string>("StudentPhone")
                        .HasColumnType("text");

                    b.Property<string>("StudentPrivileges")
                        .HasColumnType("text");

                    b.Property<string>("Supervisor")
                        .HasColumnType("text");

                    b.Property<string>("TIN")
                        .HasColumnType("text");

                    b.Property<string>("TheDepartment")
                        .HasColumnType("text");

                    b.Property<string>("TheLevelOfEducation")
                        .HasColumnType("text");

                    b.Property<string>("TitleDifferences")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WhereIsTheUltrasound")
                        .HasColumnType("text");

                    b.Property<string>("YearOfEnding")
                        .HasColumnType("text");

                    b.Property<string>("YearOfReceipt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentGroup");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Lesson", b =>
                {
                    b.HasOne("Stemi.WebAPI.Models.Entities.DirectoryCabinets", "DirectoryCabinets")
                        .WithMany()
                        .HasForeignKey("DirectoryCabinetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stemi.WebAPI.Models.Entities.DirectoryGroups", "DirectoryGroup")
                        .WithMany()
                        .HasForeignKey("DirectoryGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stemi.WebAPI.Models.Entities.DirectoryTime", "DirectoryTime")
                        .WithMany()
                        .HasForeignKey("DirectoryTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectoryCabinets");

                    b.Navigation("DirectoryGroup");

                    b.Navigation("DirectoryTime");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Payment", b =>
                {
                    b.HasOne("Stemi.WebAPI.Models.Entities.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Session", b =>
                {
                    b.HasOne("Stemi.WebAPI.Models.Entities.Student", "Student")
                        .WithMany("Sessions")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Stemi.WebAPI.Models.Entities.Student", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
